---
title: "Proyecto rendimiento de estudiantes"
author: "Leandro Soto Miranda"
date: "2024-10-07"
format: 
  html: 
    toc: true 
    code-fold: true
---

## 1. Definir problema

En este proyecto, analizaremos un conjunto de datos de rendiemiento de estudiantes

## 2. Recopilación de datos

```{python}
# Importación de librerías
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
import warnings
warnings.filterwarnings('ignore', category=FutureWarning)


# Carga de datos
df = pd.read_csv('data.csv', sep=",")

# Resumen estadístico
# Mostrar las primeras filas del dataset
print("Primeras filas del dataset:")
print(df.head())

# Mostrar información general del dataset
print("\nInformación del dataset:")
print(df.info())

# Descripción estadística básica del dataset
print("\nDescripción estadística:")
print(df.describe())

# Verificar si hay valores nulos en el dataset
print("\nValores nulos por columna:")
print(df.isnull().sum())

df.describe()

info = df.shape
print("\nLa cantidad de filas y columnas en nuestro dataframe es de:",info)

tipos = df.dtypes
print("\nTipos de datos presentes en el dataset:\n",tipos)
```

## 3. **Análisis de datos por Variable**
## Análisis de datos cuantitativos

```{python}
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Función para el análisis univariado de variables cuantitativas
def analizar_variable_cuantitativa(df, columna):
    mean = np.mean(df[columna])
    median = np.median(df[columna])
    std = np.std(df[columna])
    min_value = np.min(df[columna])
    max_value = np.max(df[columna])

    print(f"Análisis de la Variable '{columna}'")
    print(f"Media: {mean:.2f}")
    print(f"Mediana: {median:.2f}")
    print(f"Desviación Estándar: {std:.2f}")
    print(f"Valor Mínimo: {min_value:.2f}")
    print(f"Valor Máximo: {max_value:.2f}")
    print("\n")

    # Visualización de la distribución (Histograma con KDE)
    plt.figure(figsize=(10, 6))
    sns.histplot(df[columna], bins=30, kde=True, color='#4C72B0')
    plt.title(f'Distribución de {columna}')
    plt.xlabel(columna)
    plt.ylabel('Frecuencia')
    plt.show()

# Aplicar la función a todas las columnas numéricas del dataframe
columnas_cuantitativas = df.select_dtypes(include=['int64', 'float64']).columns
for columna in columnas_cuantitativas:
    analizar_variable_cuantitativa(df, columna)
```

## Análisis de datos cualitativos

```{python}

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Función para el análisis univariado de variables categóricas
def analizar_variable_categorica(df, columna):
    values_counts = df[columna].value_counts()
    moda = values_counts.idxmax()

    print(f"Análisis Univariado de la Variable '{columna}'")
    print(f"Frecuencia de las categorías:\n{values_counts}")
    print(f"Moda (Categoría más frecuente): {moda}")
    print("\n")

    # Visualización de la distribución
    plt.figure(figsize=(10, 6))
    sns.countplot(
        x=columna, 
        data=df[df[columna].isin(values_counts.index)], 
        order=values_counts.index, 
        palette='Set2'
    )
    plt.title(f'Distribución de {columna}')
    plt.xlabel(columna)
    plt.ylabel('Frecuencia')
    plt.xticks(rotation=45)
    plt.show()

# Aplicar la función a todas las columnas categóricas del dataframe
columnas_categoricas = df.select_dtypes(include=['object']).columns
for columna in columnas_categoricas:
    analizar_variable_categorica(df, columna)

```

# Verificar si hay valores nulos en el dataset
```{python}
print("\nValores nulos por columna:")
print(df.isnull().sum())
```

# Verificar si hay valores atopicos

```{python}
# Función para detectar outliers
def detectar_outliers(df, columna, metodo='iqr', threshold=1.5):
    """
    Detecta outliers en una columna numérica de un DataFrame usando el método del IQR o Z-score.

    Parámetros:
    - df: DataFrame de pandas.
    - columna: Nombre de la columna a analizar.
    - metodo: 'iqr' para rango intercuartílico o 'zscore' para Z-score (por defecto, 'iqr').
    - threshold: Umbral para detectar outliers (por defecto, 1.5 para IQR, 3 para Z-score).

    Retorna:
    - DataFrame con los outliers detectados.
    """
    if metodo == 'iqr':
        # Cálculo de Q1, Q3 y IQR
        Q1 = df[columna].quantile(0.25)
        Q3 = df[columna].quantile(0.75)
        IQR = Q3 - Q1

        # Rango para identificar outliers
        lower_bound = Q1 - threshold * IQR
        upper_bound = Q3 + threshold * IQR

        # Identificación de outliers
        outliers = df[(df[columna] < lower_bound) | (df[columna] > upper_bound)]
        metodo_desc = f'IQR (Threshold={threshold})'
    
    elif metodo == 'zscore':
        # Cálculo del Z-score
        mean = df[columna].mean()
        std = df[columna].std()
        z_scores = (df[columna] - mean) / std

        # Identificación de outliers
        outliers = df[(z_scores < -threshold) | (z_scores > threshold)]
        metodo_desc = f'Z-score (Threshold={threshold})'
    
    else:
        raise ValueError("Método no reconocido. Usa 'iqr' o 'zscore'.")

    print(f"Outliers detectados en la columna '{columna}' usando el método {metodo_desc}: {len(outliers)}")
    return outliers

# Aplicar la función a todas las columnas numéricas
columnas_numericas = df.select_dtypes(include=['int64', 'float64']).columns
for columna in columnas_numericas:
    outliers = detectar_outliers(df, columna, metodo='iqr', threshold=1.5)
    if not outliers.empty:
        print(outliers.head())  # Muestra los primeros 5 outliers detectados por columna
        print("\n")

```


```{python}
def generar_boxplot(df, columna):
    plt.figure(figsize=(10, 6))
    sns.boxplot(data=df, x=columna, palette='Set2')
    plt.title(f'Boxplot de {columna}')
    plt.xlabel(columna)
    plt.show()

# Aplicar la función a todas las columnas numéricas del dataframe
columnas_numericas = df.select_dtypes(include=['int64', 'float64']).columns
for columna in columnas_numericas:
    generar_boxplot(df, columna)
```

